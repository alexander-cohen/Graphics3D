#include "@arrayvec.h"

void __@av_append(@arrayvec st, @ dat) {
	if(st->len >= st->datalen) {
		st->datalen *= 2;
		st->data = realloc(st->data, st->datalen*sizeof(@));
	}
	st->data[st->len] = dat;
	st->len++;
}

@ __@av_pop(@arrayvec st) {
	assert(st->len);
	st->len--;
	return st->data[st->len];
}

void __@av_replace(@arrayvec st, size_t i, @ dat) {
	st->data[i] = dat;
}

void __@av_replacemultiple(@arrayvec st, size_t i, @ *dats, size_t lendats) {
	assert(lendats);
	if(lendats == 1) {
		return __@av_replace(st, i, dats[0]);
	}
	__@av_replace(st, i, dats[0]);
	for(i = 1; i < lendats; i++) {
		__@av_append(st, dats[i]);
	}
}

@arrayvec new_@arrayvec() {
	@arrayvec res = malloc(sizeof(struct __@AV));
	res->len = 0;
	res->datalen = 1024;
	res->data = malloc(res->datalen*sizeof(@));
	res->append = __@av_append;
	res->pop = __@av_pop;
	res->replace = __@av_replace;
	res->replace_many = __@av_replacemultiple;
    return res;
}

void free_@arrayvec(@arrayvec st) {
	free(st->data);
}
